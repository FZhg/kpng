syntax = "proto3";

package localnetv1;

option go_package = "github.com/mcluseau/kube-proxy2/pkg/api/localnetv1";

service Endpoints {
    // Returns all the endpoints for this node.
    rpc Watch (stream WatchReq) returns (stream OpItem);
}

message WatchReq {
    // NodeName of the requester
    string NodeName = 1;
}

message OpItem {
    oneof Op {
        // Sync signals that the change set is complete (especially useful to know when the initial state is complete)
        Sync Sync = 1;

        // Add/update a value in a set
        Value Set = 2;
        // Delete a value in a set
        Ref   Delete = 3;
    }
}

message Sync {
}

enum Set {
    UnknownSet = 0;
    ServicesSet = 1;
    EndpointsSet = 2;
}

message Ref {
    Set    Set = 1;
    string Path = 2;
}

message Value {
    Ref   Ref = 1;
    bytes Bytes = 2;
}

message Service {
    string Namespace = 1;
    string Name = 2;
    string Type = 3;

    ServiceIPs IPs = 4;

    // true if the service maps the whole IP, not just individual ports.
    bool MapIP = 5;

    // Individual ports mapped for the this service
    repeated PortMapping Ports = 6;

    bool ExternalTrafficToLocal = 7;
}

message ServiceIPs {
    string ClusterIP = 1;
    IPSet  ExternalIPs = 2;
}

message Endpoint {
    string Hostname = 1;
    IPSet  IPs = 3;
}

message IPSet {
    repeated string V4 = 1;
    repeated string V6 = 2;
}

message Port {
    string   Name     = 1;
    Protocol Protocol = 2;
    int32    Port     = 3;
}

enum Protocol {
    UnknownProtocol = 0;
    TCP = 1;
    UDP = 2;
    SCTP = 3;
}

message PortMapping {
    string   Name       = 1;
    Protocol Protocol   = 2;
    int32    Port       = 3;
    int32    NodePort   = 4;
    int32    TargetPort = 5;
    string   TargetPortName = 6;
}

// Useful for client implementation to provide pre-matched entries.
message ServiceEndpoints {
    Service Service = 1;

    // All possible endpoints for this service
    repeated Endpoint Endpoints = 2;
}

// internal use
// TODO document

message EndpointInfo {
    string Namespace = 1;
    string SourceName = 2;
    string ServiceName = 3;
    string NodeName = 4;

    map<string, string> Topology = 5;
    Endpoint Endpoint = 6;
    string EndpointHash = 7;
    EndpointConditions Conditions = 8;
}

message EndpointConditions {
    bool Ready = 1;
}
